// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 9, 5, 19, 57, 45, 175789200, time.UTC),
		},
		"/001_tests.patch": &vfsgen۰CompressedFileInfo{
			name:             "001_tests.patch",
			modTime:          time.Date(2019, 9, 4, 18, 33, 48, 49316900, time.UTC),
			uncompressedSize: 752,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xbf\x4e\xf3\x30\x14\xc5\xe7\x46\xca\x3b\xdc\xdd\x9f\xd3\x7b\x9d\x7e\x4d\xe3\x29\x45\x88\x8d\x4e\x88\x89\xc5\x6a\x1c\x94\x12\x1c\xc9\x76\x45\x5f\xae\xea\xcb\x94\xb9\x1b\x33\x72\x4b\x69\x81\x44\xfc\xb1\x3c\x1d\xeb\x1c\xf9\xf7\x2b\xeb\xaa\x02\x3e\x53\x4b\x0b\xce\xce\x87\xd7\xda\xaa\xe1\x8d\x5e\xf9\xa9\x2b\x95\x4b\xfc\xca\x87\x78\xda\x91\xc7\x11\xe7\xbc\xa7\x33\xa0\x3c\x43\x8e\xc4\x91\x00\x49\x22\x4a\xc4\x04\x8f\x07\x18\x12\x62\x1c\x31\xc6\xfa\xc6\x07\x02\x29\xe7\x98\x73\x1c\x81\x40\x49\x13\xf9\x3f\x4f\x04\x8a\x4c\xd0\x64\x3f\x20\xc2\x40\x51\x00\xc7\x7f\x08\x8c\xa0\x28\xe2\x88\x4d\x9b\xc6\x43\xb5\xdb\xac\x2d\x94\xda\x38\x05\xce\x2f\x76\x9b\xb5\xb1\xca\xc4\xd1\x1d\xcc\x5a\x30\xfa\xa9\xa9\x8d\x06\xe5\x41\x9b\x12\xda\x0a\xaa\xba\xd1\x71\xd4\x67\xe1\xb2\x9d\x5f\x75\x48\x38\xc6\x1d\x0e\x8e\x4f\xe7\x04\x34\x96\xa3\xb1\x4c\xb3\x24\x13\x94\xa6\x39\x9e\x08\xbe\x2a\x78\xef\xff\x48\x61\x30\x40\xc0\x82\x84\x60\x80\x1f\x0c\xbc\xec\xf9\xa1\x59\x2c\x0f\x0e\xb6\xbf\x37\xf0\xf6\x95\x8b\x13\xfc\x79\x72\xe2\x3e\x4f\x3f\x21\x87\x9b\x26\x44\x28\x30\x1d\x77\x20\x7f\xa8\xfe\x89\xf6\xb6\x06\xaf\xe6\x0f\xed\x23\x98\x25\xb8\x67\xb8\xdf\x5a\xa3\xbe\xe1\x7c\x0d\x00\x00\xff\xff\x17\x55\x75\xc8\xf0\x02\x00\x00"),
		},
		"/README.md": &vfsgen۰CompressedFileInfo{
			name:             "README.md",
			modTime:          time.Date(2019, 9, 5, 19, 57, 45, 176789100, time.UTC),
			uncompressedSize: 136,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\xe1\x0d\xc2\x40\x08\x05\xe0\xff\x4e\xf1\x26\xe8\x34\x5d\x00\x8f\x77\x72\x09\x42\x53\x68\x5c\xdf\x68\xd2\x01\xbe\xdd\x88\xb9\x9c\x85\x99\xae\x3c\x31\x32\x5a\x56\x14\xa4\x8a\x5d\x68\x93\xc6\x67\xb9\xe3\x49\x8c\x7c\x1f\xcb\xa9\x58\xd1\x89\xfe\xdb\x10\xc7\x2b\x31\x52\xb9\x3d\x76\x63\xf1\xa6\x43\xe2\x87\xae\xa2\xa2\x13\x96\xae\x38\xa4\x87\xb1\x20\xa1\xc8\x36\x9e\xa8\xbe\xe6\xdc\xbe\x01\x00\x00\xff\xff\x28\x4f\x05\xdc\x88\x00\x00\x00"),
		},
		"/src": &vfsgen۰DirInfo{
			name:    "src",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 53315700, time.UTC),
		},
		"/src/Mera": &vfsgen۰DirInfo{
			name:    "Mera",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 51319000, time.UTC),
		},
		"/src/Mera/TextDocE.txt": &vfsgen۰FileInfo{
			name:    "TextDocE.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 51319000, time.UTC),
			content: []byte("\x49\x6e\x67\x65\x6e\x20\x64\x61\x67\x20\xe4\x72\x20\x73\x79\x6e\x6f\x6d\x20\xe4\x6e"),
		},
		"/src/Mera/TextDocF.txt": &vfsgen۰FileInfo{
			name:    "TextDocF.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 51319000, time.UTC),
			content: []byte("\x41\x6c\x6c\x74\x20\x66\xf6\x72\x20\x64\x65\x6e\x20\x6c\x6a\x75\x73\x61\x20\x73\x74\x6a\xe4\x6e\x72\x61\x6e"),
		},
		"/src/TextDocA.txt": &vfsgen۰FileInfo{
			name:    "TextDocA.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 52316300, time.UTC),
			content: []byte("\x53\x74\x61\x66\x66\x61\x6e\x20\x56\x61\x72\x20\x65\x6e\x20\x73\x74\x61\x6c\x6c\x65\x64\x72\xe4\x6e\x67"),
		},
		"/src/TextDocB.txt": &vfsgen۰FileInfo{
			name:    "TextDocB.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 53315700, time.UTC),
			content: []byte("\x56\x69\x20\x74\x61\x63\x6b\x6f\x6d\x20\x6e\x75\x20\x73\xe5\x20\x67\xe4\x72\x6e\x61"),
		},
		"/src/TextDocC.txt": &vfsgen۰FileInfo{
			name:    "TextDocC.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 53315700, time.UTC),
			content: []byte("\x48\x61\x6e\x20\x76\x61\x74\x74\x6e\x61\x20\x73\x69\x6e\x61\x20\x66\xe5\x6c\x61\x72\x20\x66\x65\x6d"),
		},
		"/src.7z": &vfsgen۰FileInfo{
			name:    "src.7z",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 50316600, time.UTC),
			content: []byte("\x37\x7a\xbc\xaf\x27\x1c\x00\x04\x6a\xab\x77\x8c\x22\x01\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x00\x00\x00\x00\xd0\xdb\x1a\x9b\xe0\x00\x77\x00\x71\x5d\x00\x24\x9b\x88\xe6\x6d\xc5\x26\x83\xf9\xd7\xa7\x98\xe8\x25\xc8\xa1\xd1\x90\xf9\x08\xb8\x05\x42\xa2\x49\xe8\xe2\x59\x76\x53\xfa\xd9\x82\xfd\xc4\x93\xaf\xb5\xb5\x85\x1b\x1c\x46\x13\xcc\x8f\x26\xd5\x55\x4c\x3f\xf3\x12\x1d\x7d\x4f\x45\xec\x06\x53\xd1\xaa\x4f\xb8\x2d\x25\x52\xbe\x53\x12\x29\x0f\xb9\x6c\x02\x79\xd3\x97\x07\xe2\x09\x82\xfb\xf0\x22\x3a\x82\x1f\x6e\x42\x15\x48\xbc\x7a\x2e\x30\xd4\x11\x2d\x4e\xe5\xb4\xeb\xdd\x8b\x47\x81\x38\xc2\x24\xd4\x89\x00\x00\x00\x00\x81\x33\x07\xae\x0f\xd4\xd2\x7c\x59\x42\x15\xf6\xb3\x45\x7d\x69\x4d\x8d\x78\x81\xd4\xea\x3c\x56\x6c\x52\xb6\x05\xbb\x0a\x6d\xcf\x46\xb2\x43\x98\x53\xfb\x5f\xf9\x81\xb1\xdf\x13\x62\xe4\xf5\xfd\x5e\xb1\x82\xd7\x80\xa3\x0c\x2c\x9a\xbe\x50\xf7\xb2\x08\xc5\x0a\x5d\xe5\x78\xf1\x38\xe9\x10\x99\x0d\x2f\x8f\xc8\x9d\xca\xbf\xf0\x90\x18\x29\xdc\x0c\x00\xfb\x40\x00\xc2\xa4\xee\x69\x7f\x4d\x70\x16\x38\xe7\x49\x51\x36\x18\x42\x60\xa2\xd0\xd3\xf6\x15\xab\x65\x6d\x13\x1a\xb7\xf1\xc3\x56\x12\xfe\x13\xa6\x65\xad\x25\xae\xf9\x4c\x17\x78\x92\x45\x49\x07\x76\x88\xe6\x35\x81\xf0\x6f\xc7\x51\x8c\x15\x0c\x64\x9c\x5d\x10\xf7\x74\x72\x52\x2d\x7c\x08\x72\xbd\x4a\x9e\x43\xfe\x22\x30\x00\x17\x06\x79\x01\x09\x80\xa9\x00\x07\x0b\x01\x00\x01\x23\x03\x01\x01\x05\x5d\x00\x10\x00\x00\x0c\x81\x7a\x0a\x01\x20\x16\x6a\x59\x00\x00"),
		},
		"/srcA": &vfsgen۰DirInfo{
			name:    "srcA",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 56315600, time.UTC),
		},
		"/srcA/Mera": &vfsgen۰DirInfo{
			name:    "Mera",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 55316000, time.UTC),
		},
		"/srcA/Mera/TextAsdas.txt": &vfsgen۰FileInfo{
			name:    "TextAsdas.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 54315500, time.UTC),
			content: []byte("\x41\x6c\x6c\x74\x20\x66\xef\xbf\xbd\x72\x20\x64\x65\x6e\x73\x61\x20\x73\x74\x6a\xef\xbf\xbd\x6e\x72\x61\x6e"),
		},
		"/srcA/Mera/TextDocE.txt": &vfsgen۰FileInfo{
			name:    "TextDocE.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 55316000, time.UTC),
			content: []byte("\x49\x6e\x67\x65\x6e\x20\x64\x61\x67\x20\xe4\x72\x20\x73\x79\x6e\x6f\x6d\x20\xe4\x6e"),
		},
		"/srcA/TextDocA.txt": &vfsgen۰FileInfo{
			name:    "TextDocA.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 55316000, time.UTC),
			content: []byte("\x53\x74\x61\x66\x66\x61\x6e\x20\x56\x61\x72\x20\x65\x6e\x20\x73\x74\x61\x6c\x6c\x65\x64\x72\xe4\x6e\x67"),
		},
		"/srcA/TextDocC.txt": &vfsgen۰FileInfo{
			name:    "TextDocC.txt",
			modTime: time.Date(2019, 9, 4, 18, 33, 48, 56315600, time.UTC),
			content: []byte("\x48\x61\x6e\x20\x76\x61\x74\x74\x6e\x61\x20\x73\x69\x6e\x61\x20\x66\xe5\x6c\x61\x72\x20\x66\x65\x6d"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/001_tests.patch"].(os.FileInfo),
		fs["/README.md"].(os.FileInfo),
		fs["/src"].(os.FileInfo),
		fs["/src.7z"].(os.FileInfo),
		fs["/srcA"].(os.FileInfo),
	}
	fs["/src"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/src/Mera"].(os.FileInfo),
		fs["/src/TextDocA.txt"].(os.FileInfo),
		fs["/src/TextDocB.txt"].(os.FileInfo),
		fs["/src/TextDocC.txt"].(os.FileInfo),
	}
	fs["/src/Mera"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/src/Mera/TextDocE.txt"].(os.FileInfo),
		fs["/src/Mera/TextDocF.txt"].(os.FileInfo),
	}
	fs["/srcA"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/srcA/Mera"].(os.FileInfo),
		fs["/srcA/TextDocA.txt"].(os.FileInfo),
		fs["/srcA/TextDocC.txt"].(os.FileInfo),
	}
	fs["/srcA/Mera"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/srcA/Mera/TextAsdas.txt"].(os.FileInfo),
		fs["/srcA/Mera/TextDocE.txt"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
